/*
* Copyright (c) 2023 Contributors to the Eclipse Foundation.
*
* This program and the accompanying materials are made
* available under the terms of the Eclipse Public License 2.0
* which is available at https://www.eclipse.org/legal/epl-2.0/
*
* SPDX-License-Identifier: EPL-2.0
*
* Contributors:
*   SmartCity Jena - initial
*   Stefan Bischof (bipolis.org) - initial
*/

// Breaking the statement related logic out
// into an INCLUDE

// ----------------------------------------------------------------------------
// MDX Statement
//
// <statement> ::= <selectStatement>
//                   | <drillthroughStatement>
//                   | <explainStatement>
//
// <selectStatement> ::= [WITH <formulaSpecification>]
//                         SELECT [<SelectQueryAxisClause>
//                                [, <SelectQueryAxisClause>...]]
//                         FROM [<cubeSpecification>]
//                         [WHERE <slicerSpecification>]
//                         [<cellProps>]
//
// <drillthroughStatment> ::=
//     DRILLTHROUGH
//     [ MAXROWS <count> ]
//     [ FIRSTROWSET <count> ]
//     <selectStatement>
//     [ RETURN <memberOrAttribute> [, <memberOrAttribute>...] ]
//
// <explainStatement> ::=
//     EXPLAIN PLAN FOR ( <selectStatement> | <drillthroughStatement> )
//
MdxStatement MdxStatement#interface :
  (
    SelectStatement
  	|
  	DrillthroughStatement
    |
    ExplainStatement
  )
  {MdxStatement result = (MdxStatement) peekNode();}
  < EOF >
  {
    return result;
  }
;

INJECT DrillthroughStatement :
   import java.util.List;
   import java.util.Optional;
   implements MdxStatement, org.eclipse.daanse.mdx.model.api.DrillthroughStatement
{
   public Optional<Integer> maxRows() {
      Node maxRows = firstChildOfType(MAXROWS);
      return maxRows == null ? Optional.empty()
                             : Optional.of(Integer.valueOf(maxRows.nextSibling().getImage()));
   }

   public Optional<Integer> firstRowSet() {
      Node firstRow = firstChildOfType(FIRSTROWSET);
      return firstRow == null ? Optional.empty()
                              : Optional.of(Integer.valueOf(firstRow.nextSibling().getImage()));
   }

   public SelectStatement selectStatement() {
      return firstChildOfType(SelectStatement.class);
   }

   public List<ReturnItem> returnItems() {
      List<ReturnItem> result = childrenOfType(ReturnItem.class);
      return result.isEmpty() ? null : result;
   }
}

DrillthroughStatement :
  < DRILLTHROUGH >
  (
    < MAXROWS > < UNSIGNED_INTEGER_LITERAL >
  )?
  (
    < FIRSTROWSET > < UNSIGNED_INTEGER_LITERAL >
  )?
  SelectStatement
  (
    < RETURN >
    ReturnItem
    (
      <COMMA>
      ReturnItem
    )*
  )?
;

INJECT ExplainStatement :
   implements org.eclipse.daanse.mdx.model.api.ExplainStatement
{
    public org.eclipse.daanse.mdx.model.api.MdxStatement mdxStatement() {
      return firstChildOfType(org.eclipse.daanse.mdx.model.api.MdxStatement.class);
    }
}

ExplainStatement :
  < EXPLAIN > < PLAN> < FOR >
  (
    SelectStatement
    |
    DrillthroughStatement
  )
;

INJECT SelectDimensionPropertyListClause :
   implements org.eclipse.daanse.mdx.model.api.select.SelectDimensionPropertyListClause
{
  public java.util.List<CompoundId> properties() {
     return childrenOfType(CompoundId.class);
  }
}

SelectDimensionPropertyListClause :
  (< DIMENSION >)?
  < PROPERTIES >
  CompoundId
  (
    < COMMA >
    CompoundId
  )*
;

INJECT RefreshStatement :
   implements org.eclipse.daanse.mdx.model.api.RefreshStatement;
{
   public NameObjectIdentifier cubeName() {
      return (NameObjectIdentifier) getChild(2);
   }
}

RefreshStatement :
  < REFRESH >
  < CUBE >
  NameObjectIdentifier
;

INJECT UpdateStatement :
   import java.util.List;
   implements org.eclipse.daanse.mdx.model.api.UpdateStatement;
{
   public NameObjectIdentifier cubeName() {
      return (NameObjectIdentifier) getChild(2);
   }

   public List<org.eclipse.daanse.mdx.model.api.select.UpdateClause> updateClauses() {
       return childrenOfType(org.eclipse.daanse.mdx.model.api.select.UpdateClause.class);
   }
}

UpdateStatement :
  < UPDATE >
  < CUBE >
  NameObjectIdentifier
  <SET>
  UpdateClause
  (
       < COMMA > UpdateClause
  )*

;

INJECT UpdateClause :
   implements org.eclipse.daanse.mdx.model.api.select.UpdateClause
{
    public org.eclipse.daanse.mdx.model.api.expression.Expression tupleExp() {
      return (org.eclipse.daanse.mdx.model.api.expression.Expression) getChild(0);
    }

    public org.eclipse.daanse.mdx.model.api.expression.Expression valueExp() {
          return (org.eclipse.daanse.mdx.model.api.expression.Expression) getChild(2);
    }

    public org.eclipse.daanse.mdx.model.api.select.Allocation allocation() {
          return org.eclipse.daanse.mdx.model.api.select.Allocation.NO_ALLOCATION;
    }

    public org.eclipse.daanse.mdx.model.api.expression.Expression weight() {
          return null;
    }
}

UpdateClause :
  PrimaryExpression
    < EQ >
  Expression
;

INJECT DMVStatement :
   implements org.eclipse.daanse.mdx.model.api.DMVStatement;
{
    public java.util.List<CompoundId> columns() {
        return childrenOfType(CompoundId.class);
    }

    public NameObjectIdentifier table() {
       return (NameObjectIdentifier) firstChildOfType(DOT).nextSibling();
    }

    public org.eclipse.daanse.mdx.model.api.expression.Expression where() {
        Node where = firstChildOfType(WHERE);
        return where == null ? null
                             : (org.eclipse.daanse.mdx.model.api.expression.Expression) where.nextSibling();
    }
}

#DMVStatement :
  < SELECT >
  (
    CompoundId
    (
        < COMMA > CompoundId
    )*
  )?
  < FROM >
  < SYSTEM_CUBE >
  < DOT >
  NameObjectIdentifier
  (
     < WHERE > Expression()
  )?
  {
     return CURRENT_NODE;
  }
;

INJECT SelectQueryAxisClause :
   implements org.eclipse.daanse.mdx.model.api.select.SelectQueryAxisClause
{
    public boolean nonEmpty() {
       return getChild(0).getType() == NON && getChild(1).getType() == EMPTY;
    }

    public org.eclipse.daanse.mdx.model.api.expression.Expression expression() {
        return firstChildOfType(org.eclipse.daanse.mdx.model.api.expression.Expression.class);
    };

    public Axis axis() {
       return (Axis) getLastChild();
    };

    public SelectDimensionPropertyListClause selectDimensionPropertyListClause() {
       return firstChildOfType(SelectDimensionPropertyListClause.class);
    }
}

// <SelectQueryAxisClause> ::= [NON EMPTY] <set> [<dimProps>] ON <axis_name>
SelectQueryAxisClause :
  (< NON > < EMPTY >) ?
  Expression
  (
    SelectDimensionPropertyListClause
  )?
  < ON >
  Axis
;

INJECT Axis :
   implements org.eclipse.daanse.mdx.model.api.select.Axis
{
   public int ordinal() {
      Node explicitOrdinalNode = firstChildOfType(UNSIGNED_INTEGER_LITERAL);
      if (explicitOrdinalNode != null) {
         return Integer.valueOf(explicitOrdinalNode.getImage());
      }
      NodeType type = getChild(0).getType();
      if (type == COLUMNS) return 0;
      else if (type == ROWS) return 1;
      else if (type == PAGES) return 2;
      else if (type == CHAPTERS) return 3;
      else if (type == SECTIONS) return 4;
      throw new IllegalStateException("type must be between 0 and 4 here");
   }

   public boolean named() {
      return ordinal() >= 0 && ordinal() <=4;
   }

   public String name() {
      int ordinal = ordinal();
      return switch(ordinal) {
         case -2-> "None";
         case -1-> "Slicer";
         case 0 -> "Columms";
         case 1 -> "Rows";
         case 2 -> "Pages";
         case 3 -> "Chapters";
         case 4 -> "Sections";
         default  -> "Axis(" + ordinal + ")";
      };
   }
}

Axis :
   (
    < UNSIGNED_INTEGER_LITERAL >
    |
    < COLUMNS >
    |
    < ROWS >
    |
    < PAGES >
    |
    < SECTIONS >
    |
    < CHAPTERS >
   )
   |
   < AXIS >
   < LPAREN >
   < UNSIGNED_INTEGER_LITERAL >
   < RPAREN >
;

INJECT CreateSetBodyClause :
  implements org.eclipse.daanse.mdx.model.api.select.CreateSetBodyClause
{
   public CompoundId compoundId() {
      return (CompoundId) getChild(0);
   }

   public org.eclipse.daanse.mdx.model.api.expression.Expression expression() {
      return (org.eclipse.daanse.mdx.model.api.expression.Expression) getChild(2);
   }
}

CreateSetBodyClause :
  CompoundId < AS > Expression
;

INJECT SelectCellPropertyListClause :
   import java.util.stream.Collectors;
   implements org.eclipse.daanse.mdx.model.api.select.SelectCellPropertyListClause
{
   public boolean cell() {
      return getChild(0).getType() == CELL;
   }

   public java.util.List<String> properties() {
       return childrenOfType(ID).stream().map(n->n.getImage()).collect(Collectors.toList());
   }
}

SelectCellPropertyListClause SelectCellPropertyListClause# :
  (< CELL >)?
  < PROPERTIES >
  <ID>
  (
    < COMMA > <ID>
  )*
  {
    return CURRENT_NODE;
  }
;

INJECT SelectSlicerAxisClause :
   implements org.eclipse.daanse.mdx.model.api.select.SelectSlicerAxisClause;
{
    public org.eclipse.daanse.mdx.model.api.expression.Expression expression() {
      return (org.eclipse.daanse.mdx.model.api.expression.Expression) getChild(1);
    }
}

SelectSlicerAxisClause :
  < WHERE >
  Expression
;


INJECT SelectQueryAxesClause :
   implements SelectQueryClause, org.eclipse.daanse.mdx.model.api.select.SelectQueryAxesClause
{
   public java.util.List<SelectQueryAxisClause> selectQueryAxisClauses() {
      return childrenOfType(SelectQueryAxisClause.class);
   }
}

SelectQueryAxesClause :
  SelectQueryAxisClause
  (
    < COMMA >
    SelectQueryAxisClause
  )*
;


INJECT SelectSubcubeClauseStatement :
  import java.util.Optional;
  import org.eclipse.daanse.mdx.model.api.select.SelectSlicerAxisClause;
  implements SelectSubcubeClause, org.eclipse.daanse.mdx.model.api.select.SelectSubcubeClauseStatement
{
    public org.eclipse.daanse.mdx.model.api.select.SelectQueryClause selectQueryClause() {
        return firstChildOfType(org.eclipse.daanse.mdx.model.api.select.SelectQueryClause.class);
    }

    public org.eclipse.daanse.mdx.model.api.select.SelectSubcubeClause selectSubcubeClause() {
        return firstChildOfType(org.eclipse.daanse.mdx.model.api.select.SelectSubcubeClause.class);
    }

    public Optional<SelectSlicerAxisClause> selectSlicerAxisClause() {
      return Optional.ofNullable(firstChildOfType(SelectSlicerAxisClause.class));
    }
}

SelectSubcubeClauseStatement :
  < LPAREN >
  < SELECT >
  (
    SelectQueryClause
  )?
  < FROM >
  SelectSubcubeClause
  (
    SelectSlicerAxisClause
  )?
  < RPAREN >
;

SelectQueryClause#interface :
   SelectQueryAsteriskClause
   |
   SelectQueryAxesClause
   |
   SelectQueryEmptyClause
;

INJECT SelectQueryEmptyClause :
       implements SelectQueryClause,
                  org.eclipse.daanse.mdx.model.api.select.SelectQueryEmptyClause

SelectQueryEmptyClause#(>=0) : {} ;

INJECT SelectQueryAsteriskClause : implements SelectQueryClause, org.eclipse.daanse.mdx.model.api.select.SelectQueryAsteriskClause;

SelectQueryAsteriskClause :
  < ASTERISK >
;

INJECT SelectStatement :
   import java.util.List;
   import java.util.Optional;
   import org.eclipse.daanse.mdx.model.api.select.SelectWithClause;
   import org.eclipse.daanse.mdx.model.api.select.SelectSlicerAxisClause;
   import org.eclipse.daanse.mdx.model.api.select.SelectCellPropertyListClause;
   implements MdxStatement, org.eclipse.daanse.mdx.model.api.SelectStatement;
{
    public List<SelectWithClause> selectWithClauses() {
        return childrenOfType(SelectWithClause.class);
    }

    public org.eclipse.daanse.mdx.model.api.select.SelectQueryClause selectQueryClause() {
        return firstChildOfType(org.eclipse.daanse.mdx.model.api.select.SelectQueryClause.class);
    }

    public org.eclipse.daanse.mdx.model.api.select.SelectSubcubeClause selectSubcubeClause() {
        return firstChildOfType(org.eclipse.daanse.mdx.model.api.select.SelectSubcubeClause.class);
    }

    public Optional<SelectSlicerAxisClause> selectSlicerAxisClause() {
        return Optional.ofNullable(firstChildOfType(SelectSlicerAxisClause.class));
    };

    public Optional<SelectCellPropertyListClause> selectCellPropertyListClause() {
        return Optional.ofNullable(firstChildOfType(SelectCellPropertyListClause.class));
    };
}

//https://learn.microsoft.com/en-us/sql/mdx/mdx-data-manipulation-select?view=sql-server-ver16
SelectStatement :
  (
    < WITH > (SelectWithClause)+
  )?
  < SELECT >
  (
    SelectQueryAsteriskClause
    |
    SelectQueryAxesClause
  )?
  < FROM >
  SelectSubcubeClause
  (
    SelectSlicerAxisClause
  )?
  (
    SelectCellPropertyListClause
  )?
;


SelectSubcubeClause#interface :
  SelectSubcubeClauseName
  |
  SelectSubcubeClauseStatement
;

INJECT SelectSubcubeClauseName :
   implements SelectSubcubeClause, org.eclipse.daanse.mdx.model.api.select.SelectSubcubeClauseName
{
   public NameObjectIdentifier cubeName() {
      return (NameObjectIdentifier) getChild(0);
   }
}

SelectSubcubeClauseName SelectSubcubeClauseName :
  NameObjectIdentifier
  {
    return CURRENT_NODE;
  }
;

INJECT MeasureBodyClause : implements SelectWithClause, org.eclipse.daanse.mdx.model.api.select.MeasureBodyClause;

// https://learn.microsoft.com/en-us/analysis-services/multidimensional-models/mdx/mdx-building-measures?view=asallproducts-allversions
MeasureBodyClause :
  <NOT><NOT><NOT><NOT><NOT><NOT><NOT>
;


// https://docs.oracle.com/cd/E57185_01/ESBTR/mdx_grammar_rules.html
SelectWithClause#interface :
  <CELL> <CALCULATION> CreateCellCalculationBodyClause
  |
  ("CALCULATED")? < MEMBER > CreateMemberBodyClause
  |
  < SET > CreateSetBodyClause
  |
  <MEASURE> MeasureBodyClause
;

INJECT ReturnItem :
  implements org.eclipse.daanse.mdx.model.api.ReturnItem
{
   public CompoundId compoundId() {
     return (CompoundId) getChild(0);
   }
}

ReturnItem : CompoundId ;

INJECT CreateCellCalculationBodyClause :
   implements SelectWithClause, org.eclipse.daanse.mdx.model.api.select.CreateCellCalculationBodyClause

//https://learn.microsoft.com/en-us/sql/mdx/mdx-data-definition-create-cell-calculation?view=sql-server-ver16
CreateCellCalculationBodyClause :
 <NOT><NOT><NOT><NOT><NOT><NOT><NOT>
;

// This is not used in the parser. I just re-added this method
// so that a pre-existing test still compiles
List<ReturnItem> parseReturnItems :
   {List<ReturnItem> result = new ArrayList<>();}
   ReturnItem
   {result.add((ReturnItem) peekNode());}
   (<COMMA> ReturnItem {result.add((ReturnItem) peekNode());})*
   {
    return result;
   }
;

INJECT CreateMemberBodyClause :
  implements SelectWithClause, org.eclipse.daanse.mdx.model.api.select.CreateMemberBodyClause
{
  public CompoundId compoundId() {
    return (CompoundId) getChild(0);
  }

  public org.eclipse.daanse.mdx.model.api.expression.Expression expression() {
     return (org.eclipse.daanse.mdx.model.api.expression.Expression) getChild(2);
  }

  public java.util.List<MemberPropertyDefinition> memberPropertyDefinitions() {
     return childrenOfType(MemberPropertyDefinition.class);
  }
}

// https://learn.microsoft.com/en-us/sql/mdx/mdx-data-definition-create-member?view=sql-server-ver16
CreateMemberBodyClause :
  CompoundId
  < AS >
  Expression
    (
     < COMMA > MemberPropertyDefinition
    )*
;
