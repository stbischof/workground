/*
* Copyright (c) 2023 Contributors to the Eclipse Foundation.
*
* This program and the accompanying materials are made
* available under the terms of the Eclipse Public License 2.0
* which is available at https://www.eclipse.org/legal/epl-2.0/
*
* SPDX-License-Identifier: EPL-2.0
*
* Contributors:
*   SmartCity Jena - initial
*   Stefan Bischof (bipolis.org) - initial
*/

// White space
SKIP : " " | "\t" | "\n" | "\r" | "\f" ;

INJECT PARSER_CLASS :
{
   /**
    * Set whether the parser recognizes nested multiline comments
    */
   public void allowNestedComments(boolean allow) {
      token_source.setAllowNestedComments(allow);
   }

   /**
    * Strip the opening/closing quote characters
    * and also unescapes the doubled quote characters
    * in the string.
    */
   public static String stripQuotes(String s) {
      if (s.length() == 2) return "";
      char quoteChar = s.charAt(s.length()-1);
      s = s.substring(1, s.length()-1);
      int numQuoteChars = 0;
      if (s.indexOf(quoteChar) >=0) {
         StringBuilder buf = new StringBuilder();
         for (int i = 0; i< s.length(); i++) {
            char c = s.charAt(i);
            if (c != quoteChar) buf.append(c);
            else {
              ++numQuoteChars;
              if (numQuoteChars % 2 == 1) buf.append(quoteChar);
            }
            s = buf.toString();
         }
      }
      return s;
	  }
}

INJECT LEXER_CLASS :
{
  // It seems that multiline comments can nest
  // in MDX. So we have this little TOKEN_HOOK
  // and these variables where we keep track
  // of the nesting levels of the comments and
  // where the outermost comment began.
  private int commentNesting, commentStartOffset;
  private boolean allowNestedComments=true;

  void setAllowNestedComments(boolean allowNestedComments) {
      this.allowNestedComments = allowNestedComments;
      if (!allowNestedComments && commentNesting > 1) commentNesting = 1;
  }

  private BASE_TOKEN_CLASS TOKEN_HOOK(BASE_TOKEN_CLASS tok) {
    if (tok.getType() == SLASH_STAR) {
      if (commentNesting==0) {
        commentStartOffset=tok.getBeginOffset();
      } else {
        tok.setBeginOffset(commentStartOffset);
      }
      ++commentNesting;
      if (!allowNestedComments) commentNesting = 1;
    }
    else if (tok.getType() == MULTI_LINE_COMMENT) {
      --commentNesting;
      tok.setBeginOffset(commentStartOffset);
      if (commentNesting > 0) {
         switchTo(LexicalState.IN_MULTI_LINE_COMMENT);
      }
    }
    // If we hit EOF but commentNesting is > 0,
    // we obviously have a problem!
    else if (tok.getType() == EOF && commentNesting !=0) {
      tok.setBeginOffset(commentStartOffset);
      tok.setType(INVALID);
    }
    return tok;
  }
}

UNPARSED #Comment :
  < SINGLE_LINE_COMMENT : ("//" | "--") (~["\n"])* "\n" > #SingleLineComment
;

<DEFAULT, IN_MULTI_LINE_COMMENT>
UNPARSED #Comment :
  <SLASH_STAR : "/*"> : IN_MULTI_LINE_COMMENT
;

< IN_MULTI_LINE_COMMENT >
UNPARSED #Comment :
  < MULTI_LINE_COMMENT : "*/" > #MultiLineComment : DEFAULT
;

< IN_MULTI_LINE_COMMENT >
SKIP :
  < ~[ ] >
;

/*
 * Separators
 */
< DEFAULT >
TOKEN #Separator :
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < COMMA : "," >
| < SEMICOLON : ";" >
| < DOT : "." >
;


TOKEN #Keyword:
< ALL : "ALL" >
| < ALLMEMBERS : "ALLMEMBERS" >
| < ANCESTOR : "ANCESTOR" >
| < ANCESTORS : "ANCESTORS" >
| < AND : "AND" >
| < AS : "AS" >
| < ASC : "ASC" >
| < AXIS : "AXIS" >
| < CASE : "CASE" >
| < CALCULATION : "CALCULATION" >
| < CAST : "CAST" >
| < CELL : "CELL" >
| < CHAPTERS : "CHAPTERS" >
| < COLUMNS : "COLUMNS" >
| < CUBE : "CUBE" >
| < DIMENSION : "DIMENSION" >
| < DRILLTHROUGH : "DRILLTHROUGH" >
| < ELSE : "ELSE" >
| < EMPTY : "EMPTY" >
| < END : "END" >
| < EXISTING : "EXISTING" >
| < EXPLAIN : "EXPLAIN" >
| < FIRSTROWSET : "FIRSTROWSET" >
| < FOR : "FOR" >
| < FROM : "FROM" >
| < IN : "IN" >
| < IS : "IS" >
| < MATCHES : "MATCHES" >
| < MAXROWS : "MAXROWS" >
| < MEASURE : "MEASURE" >
| < MEMBER : "MEMBER" >
| < NON : "NON" >
| < NOT : "NOT" >
| < NULL : "NULL" > #NullLiteral
| < ON : "ON" >
| < OR : "OR" >
| < PAGES : "PAGES" >
| < PLAN : "PLAN" >
| < PROPERTIES : "PROPERTIES" >
| < REFRESH : "REFRESH" >
| < UPDATE : "UPDATE" >
| < RETURN : "RETURN" >
| < ROWS : "ROWS" >
| < SECTIONS : "SECTIONS" >
| < SELECT : "SELECT" >
| < SET : "SET" >
| < THEN : "THEN" >
| < WHEN : "WHEN" >
| < WHERE : "WHERE" >
| < XOR : "XOR" >
| < WITH : "WITH" >
| < SYSTEM_CUBE : "$SYSTEM" >
;

#if false
// This is a list of supposedly reserved words
// that are not really part of the grammar of the
// language. For now, this is commented out.
TOKEN #ReservedWord :
   <RESERVED_WORD : "ABSOLUTE"|"ACTIONPARAMETERSET"|"ADDCALCULATEDMEMBERS"
                  | "AFTER"|"AGGREGATE"|"ALL"|"ALLMEMBERS"|"ANCESTOR"
                  | "ANCESTORS"|"ASCENDANTS"|"AVERAGE"|"BASC"|"BEGIN"
                  | "BEFORE"|"BEFORE_AND_AFTER"|"BDESC"|"BY"|"BOTTOMCOUNT"
                  | "BOTTOMPERCENT"|"BOTTOMSUM"|"CACHE"|"CALCULATE"
                  | "CALCULATIONCURRENTPASS"|"CALCULATIONPASSVALUE"
                  | "CALCULATIONS"|"CALL"|"CELLFORMULASETLIST"|"CHILDREN"
                  | "CLEAR"|"CLOSINGPERIOD"|"COALESCEEMPTY"|"COLUMN"
                  | "CORRELATION"|"COUSIN"|"COVARIANCE"|"COVARIANCEN"
                  | "COMMIT"|"COUNT"|"CREATE"|"CREATEPROPERTYSET"
                  | "CREATEVIRTUALDIMENSION"|"CROSSJOIN"|"CURRENT"
                  | "CURRENTCUBE"|"CURRENTMEMBER"|"DEFAULTMEMBER"
                  | "DEFAULT_MEMBER"|"DESC"|"DESCENDANTS"|"DESCRIPTION"
                  | "DIMENSIONS"|"DISTINCT"|"DISTINCTCOUNT"|"DRILLDOWNLEVEL"
                  | "DRILLDOWNLEVELBOTTOM"|"DRILLDOWNLEVELTOP"|"DRILLDOWNMEMBER"
                  | "DRILLDOWNMEMBERBOTTOM"|"DRILLDOWNMEMBERTOP"|"DRILLUPLEVEL"
                  | "DRILLUPMEMBER"|"DROP"|"ERROR"|"EXCEPT"|"EXTRACT"
                  | "EXCLUDEEMPTY"|"FALSE"|"FILTER"|"FIRSTCHILD"|"FIRSTSIBLING"
                  | "FREEZE"|"GENERATE"|"GLOBAL"|"GROUP"|"GROUPING"|"HEAD"
                  | "HIERARCHIZE"|"HIERARCHY"|"HIDDEN"|"IGNORE"|"IIF"|"INCLUDE"
                  | "INCLUDEEMPTY"|"INDEX"|"INTERSECT"|"ISEMPTY"|"ISANCESTOR"
                  | "ISEMPTY"|"ISGENERATION"|"ISLEAF"|"ISSIBLING"|"ITEM"
                  | "LAG"|"LASTCHILD"|"LASTPERIODS"|"LASTSIBLING"|"LEAD"|"LEAVES"
                  | "LEVEL"|"LEVELS"|"LINKMEMBER"|"LINREGINTERCEPT"|"LINREGPOINT"
                  | "LINREGR2"|"LINREGSLOPE"|"LINREGVARIANCE"|"LOOKUPCUBE"
                  | "MAX"|"MEDIAN"|"MEMBERS"|"MEMBERTOSTR"|"MIN"|"MTD"|"NAME"
                  | "NAMETOSET"|"NEST"|"NEXTMEMBER"|"NO_ALLOCATION"
                  | "NO_PROPERTIES"|"OPENINGPERIOD"|"NONEMPTYCROSSJOIN"
                  | "NOT_RELATED_TO_FACTS" | "PARALLELPERIOD"|"PARENT"|"PASS"
                  | "PERIODSTODATE"|"POST"|"PREDICT"|"PREVMEMBER"|"PROPERTY"|"QTD"
                  | "RANK"|"RECURSIVE"|"RELATIVE"|"ROLLBACK"|"ROLLUPCHILDREN"|"ROOT"
                  | "STDEV"|"STDEVP"|"SCOPE"|"SESSION"|"SELF"|"SELF_AND_AFTER"
                  | "SELF_AND_BEFORE"|"SELF_BEFORE_AFTER"|"SETTOARRAY"|"SETTOSTR"
                  | "SORT"|"STORAGE"|"STRIPCALCULATEDMEMBERS"|"STRIPCALCULATEDMEMBERS"
                  | "STRTOMEMBER"|"STRTOSET"|"STRTOTUPLE"|"STRTOVAL"|"STRTOVALUE"
                  | "SUBSET"|"SUM"|"TAIL"|"THIS"|"TOGGLEDRILLSTATE"|"TOPCOUNT"
                  | "TOPSUM"|"TOPPERCENT"|"TOTALS"|"TRAN"|"TRANSACTION"|"TREE"
                  | "TRUE"|"TUPLETOSTR"|"TYPE"|"UNIQUE"|"UNIQUENAME"|"UPDATE"
                  | "USE"|"USE_EQUAL_ALLOCATION"|"USE_EQUAL_INCREMENT"
                  | "USE_WEIGHTED_ALLOCATION"|"USE_WEIGHTED_INCREMENT"|"USERNAME"
                  | "VALIDMEASURE"|"VALUE"|"VAR"|"VARIANCE"|"VARIANCEP"|"VARP"
                  | "UNION"|"VISUAL"|"VISUALTOTALS"|"WTD"|"YTD"
   >
;
#endif


/*
 * Operators
 */
< DEFAULT >
TOKEN #Operator :
  < ASTERISK : "*" >
| < BANG : "!" >
| < COLON : ":" >
| < CONCAT : "||" >
| < EQ : "=" >
| < GE : ">=" >
| < GT : ">" >
| < LE : "<=" >
| < LT : "<" >
| < MINUS : "-" >
| < NE : "<>" >
| < PLUS : "+" >
| < SOLIDUS : "/" >
| < ATSIGN : "@" >
;

INCLUDE JAVA_IDENTIFIER_DEF
/*
 * Identifiers
 * - https://javacc.github.io/javacc/documentation/bnf.html#identifiers
 */

TOKEN #IdToken :
  < ID : <JAVA_IDENTIFIER_START> (<JAVA_IDENTIFIER_PART>)* >
  |
  < QUOTED_ID :
    < LBRACKET >
    (
      (~[ "]", "\n", "\r" ])
    | ("]]")
    )*
    < RBRACKET >
  >
  |
  < AMP_QUOTED_ID : "&" < QUOTED_ID > >
  |
  < AMP_UNQUOTED_ID :
    "&" [ "a"-"z", "A"-"Z" ]
    ( <JAVA_IDENTIFIER_PART> )*
  >
  |
  // Neither the Microsoft spec the Oracle spec makes any mention of this!
  < AT_ID : "@" <ID> >
;

INJECT IdToken :
   import java.util.List;
   import static PARSER_PACKAGE.PARSER_CLASS.stripQuotes;
   implements NameObjectIdentifier, org.eclipse.daanse.mdx.model.api.expression.CompoundId
{
   private Quoting quoting;
   private String name;

   public Quoting quoting() {
       if (quoting == null) {
          String img = getImage();
          quoting = img.charAt(img.length()-1) == ']' ? Quoting.QUOTED : Quoting.UNQUOTED;
       }
       return quoting;
   }

   public String name() {
      if (name == null) {
         String img = getImage();
         if (img.charAt(0) == '&') {
            img = img.substring(1);
         }
         name = img.charAt(0) == '[' ? stripQuotes(img) : img;
      }
      return name;
   }

   public String value() {
       return name();
   }

   public List<NameObjectIdentifier> objectIdentifiers() {
      return List.of(this);
   }

}

TOKEN #NumericLiteral :
  < UNSIGNED_INTEGER_LITERAL : ([ "0"-"9" ])+ >
  |
  < APPROX_NUMERIC_LITERAL :
    (
      < UNSIGNED_INTEGER_LITERAL >
      |
      < DECIMAL_NUMERIC_LITERAL >
    )
    < EXPONENT >
  >
  |
  < DECIMAL_NUMERIC_LITERAL :
    ([ "0"-"9" ])+ (".")? ([ "0"-"9" ])*
  | "." ([ "0"-"9" ])+
  >
  |
  < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >
;

TOKEN :
  < STRING_LITERAL : <SINGLE_QUOTED_STRING> | <DOUBLE_QUOTED_STRING> > #StringLiteral
  |
  < #SINGLE_QUOTED_STRING :
    "'"
    (
      (~[ "'" ])
    | ("''")
    )*
    "'"
  >
  |
  < #DOUBLE_QUOTED_STRING :
    "\""
    (
      (~[ "\"" ])
    | ("\"\"")
    )*
    "\""
  >
;

INJECT StringLiteral :
   import static PARSER_PACKAGE.PARSER_CLASS.stripQuotes;
   implements Literal, org.eclipse.daanse.mdx.model.api.expression.StringLiteral
{
   private String value;

   public String value() {
      if (value == null) value = stripQuotes(getImage());
      return value;
   }
}

INJECT NumericLiteral :
  import java.math.BigDecimal;
  implements Literal, org.eclipse.daanse.mdx.model.api.expression.NumericLiteral
{
   public BigDecimal value() {
      return new BigDecimal(getImage());
   }
}

INJECT NullLiteral : implements Literal, org.eclipse.daanse.mdx.model.api.expression.NullLiteral;
