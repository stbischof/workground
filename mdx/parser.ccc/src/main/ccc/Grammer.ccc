/*
* Copyright (c) 2023 Contributors to the Eclipse Foundation.
*
* This program and the accompanying materials are made
* available under the terms of the Eclipse Public License 2.0
* which is available at https://www.eclipse.org/legal/epl-2.0/
*
* SPDX-License-Identifier: EPL-2.0
*
* Contributors:
*   SmartCity Jena - initial
*   Stefan Bischof (bipolis.org) - initial
*/

// https://docs.oracle.com/cd/E57185_01/ESBTR/mdx_syn_gram.html
// https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ms717923(v=vs.85)
BASE_NAME = Mdx;
IGNORE_CASE = true;
PARSER_PACKAGE = org.eclipse.daanse.mdx.parser.ccc;
NODE_PACKAGE = org.eclipse.daanse.mdx.parser.ccc.tree;
TABS_TO_SPACES = 4;
NODE_PREFIX = "AST";
COPYRIGHT_BLURB="\n*\n* Copyright (c) 2023 Contributors to the Eclipse Foundation.\n*\n* This program and the accompanying materials are made\n* available under the terms of the Eclipse Public License 2.0\n* which is available at https://www.eclipse.org/legal/epl-2.0/\n*\n* SPDX-License-Identifier: EPL-2.0\n*\n* Contributors: see corresponding .ccc file\n";

INJECT PARSER_CLASS :
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Optional;
import java.util.concurrent.CancellationException;

import org.eclipse.daanse.mdx.model.api.DrillthroughStatement;
import org.eclipse.daanse.mdx.model.api.ExplainStatement;
import org.eclipse.daanse.mdx.model.api.MdxStatement;
import org.eclipse.daanse.mdx.model.api.ReturnItem;
import org.eclipse.daanse.mdx.model.api.SelectStatement;
import org.eclipse.daanse.mdx.model.api.RefreshStatement;
import org.eclipse.daanse.mdx.model.api.UpdateStatement;
import org.eclipse.daanse.mdx.model.api.DMVStatement;
import org.eclipse.daanse.mdx.model.api.expression.CallExpression;
import org.eclipse.daanse.mdx.model.api.expression.CompoundId;
import org.eclipse.daanse.mdx.model.api.expression.Expression;
import org.eclipse.daanse.mdx.model.api.expression.FormulaExpression;
import org.eclipse.daanse.mdx.model.api.expression.KeyObjectIdentifier;
import org.eclipse.daanse.mdx.model.api.expression.NameObjectIdentifier;
import org.eclipse.daanse.mdx.model.api.expression.NumericLiteral;
import org.eclipse.daanse.mdx.model.api.expression.ObjectIdentifier;
import org.eclipse.daanse.mdx.model.api.select.Axis;
import org.eclipse.daanse.mdx.model.api.select.CreateCellCalculationBodyClause;
import org.eclipse.daanse.mdx.model.api.select.CreateMemberBodyClause;
import org.eclipse.daanse.mdx.model.api.select.CreateSetBodyClause;
import org.eclipse.daanse.mdx.model.api.select.MeasureBodyClause;
import org.eclipse.daanse.mdx.model.api.select.MemberPropertyDefinition;
import org.eclipse.daanse.mdx.model.api.select.SelectCellPropertyListClause;
import org.eclipse.daanse.mdx.model.api.select.SelectDimensionPropertyListClause;
import org.eclipse.daanse.mdx.model.api.select.SelectQueryAsteriskClause;
import org.eclipse.daanse.mdx.model.api.select.SelectQueryAxesClause;
import org.eclipse.daanse.mdx.model.api.select.SelectQueryAxisClause;
import org.eclipse.daanse.mdx.model.api.select.UpdateClause;
import org.eclipse.daanse.mdx.model.api.select.Allocation;
import org.eclipse.daanse.mdx.model.api.select.SelectQueryClause;
import org.eclipse.daanse.mdx.model.api.select.SelectSlicerAxisClause;
import org.eclipse.daanse.mdx.model.api.select.SelectSubcubeClause;
import org.eclipse.daanse.mdx.model.api.select.SelectSubcubeClauseName;
import org.eclipse.daanse.mdx.model.api.select.SelectSubcubeClauseStatement;
import org.eclipse.daanse.mdx.model.api.select.SelectWithClause;
import org.eclipse.daanse.mdx.model.record.DrillthroughStatementR;
import org.eclipse.daanse.mdx.model.record.ExplainStatementR;
import org.eclipse.daanse.mdx.model.record.ReturnItemR;
import org.eclipse.daanse.mdx.model.record.SelectStatementR;
import org.eclipse.daanse.mdx.model.record.expression.CallExpressionR;
import org.eclipse.daanse.mdx.model.record.expression.CompoundIdR;
import org.eclipse.daanse.mdx.model.record.expression.FormulaExpressionR;
import org.eclipse.daanse.mdx.model.record.expression.KeyObjectIdentifierR;
import org.eclipse.daanse.mdx.model.record.expression.NameObjectIdentifierR;
import org.eclipse.daanse.mdx.model.record.expression.NullLiteralR;
import org.eclipse.daanse.mdx.model.record.expression.NumericLiteralR;
import org.eclipse.daanse.mdx.model.record.expression.StringLiteralR;
import org.eclipse.daanse.mdx.model.record.expression.SymbolLiteralR;
import org.eclipse.daanse.mdx.model.record.select.AxisR;
import org.eclipse.daanse.mdx.model.record.select.CreateMemberBodyClauseR;
import org.eclipse.daanse.mdx.model.record.select.CreateSetBodyClauseR;
import org.eclipse.daanse.mdx.model.record.select.MeasureBodyClauseR;
import org.eclipse.daanse.mdx.model.record.select.MemberPropertyDefinitionR;
import org.eclipse.daanse.mdx.model.record.select.SelectCellPropertyListClauseR;
import org.eclipse.daanse.mdx.model.record.select.SelectDimensionPropertyListClauseR;
import org.eclipse.daanse.mdx.model.record.select.SelectQueryAsteriskClauseR;
import org.eclipse.daanse.mdx.model.record.select.SelectQueryAxesClauseR;
import org.eclipse.daanse.mdx.model.record.select.SelectQueryAxisClauseR;
import org.eclipse.daanse.mdx.model.record.select.UpdateClauseR;
import org.eclipse.daanse.mdx.model.record.select.SelectQueryEmptyClauseR;
import org.eclipse.daanse.mdx.model.record.select.SelectSlicerAxisClauseR;
import org.eclipse.daanse.mdx.model.record.select.SelectSubcubeClauseNameR;
import org.eclipse.daanse.mdx.model.record.select.SelectSubcubeClauseStatementR;
import org.eclipse.daanse.mdx.model.record.RefreshStatementR;
import org.eclipse.daanse.mdx.model.record.UpdateStatementR;
import org.eclipse.daanse.mdx.model.record.DMVStatementR;
{

}



TOKEN :
  < AND : "AND" >
| < AS : "AS" >
| < AXIS : "AXIS" >
| < BEGIN : "BEGIN" >
| < BY : "BY" >
| < CASE : "CASE" >
| < CALCULATION : "CALCULATION" >
| < CAST : "CAST" >
| < CELL : "CELL" >
| < CHAPTERS : "CHAPTERS" >
| < CREATE : "CREATE" >
| < COLUMNS : "COLUMNS" >
| < COMMIT : "COMMIT" >
| < CUBE : "CUBE" >
| < CURRENTCUBE : "CURRENTCUBE" >
| < DIMENSION : "DIMENSION" >
| < DRILLTHROUGH : "DRILLTHROUGH" >
| < ELSE : "ELSE" >
| < EMPTY : "EMPTY" >
| < END : "END" >
| < EXPLAIN : "EXPLAIN" >
| < FIRSTROWSET : "FIRSTROWSET" >
| < FOR : "FOR" >
| < FROM : "FROM" >
| < IN : "IN" >
| < IS : "IS" >
| < MATCHES : "MATCHES" >
| < MAXROWS : "MAXROWS" >
| < MEMBER : "MEMBER" >
| < MEASURE : "MEASURE" >
| < NON : "NON" >
| < NOT : "NOT" >
| < NULL : "NULL" >
| < ON : "ON" >
| < OR : "OR" >
| < PAGES : "PAGES" >
| < PLAN : "PLAN" >
| < PROPERTIES : "PROPERTIES" >
| < REFRESH : "REFRESH" >
| < RETURN : "RETURN" >
| < ROLLBACK : "ROLLBACK" >
| < ROWS : "ROWS" >
| < SECTIONS : "SECTIONS" >
| < SELECT : "SELECT" >
| < SESSION : "SESSION" >
| < SET : "SET" >
| < THEN : "THEN" >
| < TRAN : "TRAN" >
| < TRANSACTION : "TRANSACTION" >
| < UPDATE : "UPDATE" >
| < USE_EQUAL_ALLOCATION : "USE_EQUAL_ALLOCATION" >
| < USE_EQUAL_INCREMENT : "USE_EQUAL_INCREMENT" >
| < USE_WEIGHTED_ALLOCATION : "USE_WEIGHTED_ALLOCATION" >
| < USE_WEIGHTED_INCREMENT : "USE_WEIGHTED_INCREMENT" >
| < WHEN : "WHEN" >
| < WHERE : "WHERE" >
| < XOR : "XOR" >
| < WITH : "WITH" >
| < EXISTING : "EXISTING" >
| < SYSTEM_CUBE : "$SYSTEM" >
;


// White space
SKIP :
  " "
| "\t"
| "\n"
| "\r"
| "\f"
;


/*
 * Comments
 * https://javacc.github.io/javacc/documentation/bnf.html#comments
 * additional --
 */

< DEFAULT >
MORE :
  "//" : IN_SINGLE_LINE_COMMENT
| < "/**" ~[ "/" ] > : IN_FORMAL_COMMENT
| "--" : IN_SINGLE_LINE_COMMENT
| "/*" : IN_MULTI_LINE_COMMENT
;


< IN_SINGLE_LINE_COMMENT >
UNPARSED :
  < SINGLE_LINE_COMMENT :
    "\n"
  | "\r"
  | "\r\n" > : DEFAULT
;


< IN_FORMAL_COMMENT >
UNPARSED :
  < FORMAL_COMMENT : "*/" > : DEFAULT
;


< IN_MULTI_LINE_COMMENT >
UNPARSED :
  < MULTI_LINE_COMMENT : "*/" > : DEFAULT
;


< IN_SINGLE_LINE_COMMENT, IN_FORMAL_COMMENT, IN_MULTI_LINE_COMMENT >
MORE :
  < ~[ ] >
;


/*
 * Separators
 */
< DEFAULT >
TOKEN :
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < COMMA : "," >
| < SEMICOLON : ";" >
| < DOT : "." >
;


/*
 * Operators
 */
< DEFAULT >
TOKEN :
  < ASTERISK : "*" >
| < BANG : "!" >
| < COLON : ":" >
| < CONCAT : "||" >
| < EQ : "=" >
| < GE : ">=" >
| < GT : ">" >
| < LE : "<=" >
| < LT : "<" >
| < MINUS : "-" >
| < NE : "<>" >
| < PLUS : "+" >
| < SOLIDUS : "/" >
| < ATSIGN : "@" >
;


/*
 * Identifiers
 * - https://javacc.github.io/javacc/documentation/bnf.html#identifiers
 */
< DEFAULT >
TOKEN :
  < ID :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
|
  < QUOTED_ID :
    < LBRACKET >
    (
      (~[ "]", "\n", "\r" ])
    | ("]]")
    )*
    < RBRACKET >
  >
|
  < AMP_QUOTED_ID : "&" < QUOTED_ID > >
|
  < AMP_UNQUOTED_ID :
    "&" [ "a"-"z", "A"-"Z" ]
    (
      < LETTER >
    | < DIGIT >
    )* >
|
  < #LETTER :
    [
    "$",
    "A"-"Z",
    "_",
    "a"-"z",
    "\u00c0"-"\u00d6",
    "\u00d8"-"\u00f6",
    "\u00f8"-"\u00ff",
    "\u0100"-"\u1fff",
    "\u3040"-"\u318f",
    "\u3300"-"\u337f",
    "\u3400"-"\u3d2d",
    "\u4e00"-"\u9fff",
    "\uf900"-"\ufaff"
    ]
  >
|
  < #DIGIT :
    [
    "0"-"9",
    "\u0660"-"\u0669",
    "\u06f0"-"\u06f9",
    "\u0966"-"\u096f",
    "\u09e6"-"\u09ef",
    "\u0a66"-"\u0a6f",
    "\u0ae6"-"\u0aef",
    "\u0b66"-"\u0b6f",
    "\u0be7"-"\u0bef",
    "\u0c66"-"\u0c6f",
    "\u0ce6"-"\u0cef",
    "\u0d66"-"\u0d6f",
    "\u0e50"-"\u0e59",
    "\u0ed0"-"\u0ed9",
    "\u1040"-"\u1049"
    ]
  >
;


// Literals
TOKEN :
  < UNSIGNED_INTEGER_LITERAL : ([ "0"-"9" ])+ >
|
  < APPROX_NUMERIC_LITERAL :
    (
      < UNSIGNED_INTEGER_LITERAL >
    | < DECIMAL_NUMERIC_LITERAL >
    )
    < EXPONENT > >
|
  < DECIMAL_NUMERIC_LITERAL :
    ([ "0"-"9" ])+ (".")? ([ "0"-"9" ])*
  | "." ([ "0"-"9" ])+
  >
|
  < FLOATING_POINT_LITERAL :
    ([ "0"-"9" ])+ "." ([ "0"-"9" ])* (< EXPONENT >)? ([ "f", "F", "d", "D" ])?
  | "." ([ "0"-"9" ])+ (< EXPONENT >)? ([ "f", "F", "d", "D" ])?
  | ([ "0"-"9" ])+ < EXPONENT > ([ "f", "F", "d", "D" ])?
  | ([ "0"-"9" ])+ (< EXPONENT >)? [ "f", "F", "d", "D" ]
  >
|
  < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >
|
  < SINGLE_QUOTED_STRING :
    "'"
    (
      (~[ "'" ])
    | ("''")
    )*
    "'" >
|
  < DOUBLE_QUOTED_STRING :
    "\""
    (
      (~[ "\"" ])
    | ("\"\"")
    )*
    "\"" >
|
  < #WHITESPACE :
    [ " ", "\t", "\n", "\r", "\f" ]
  >
;


// ----------------------------------------------------------------------------
// MDX Statement
//
// <statement> ::= <selectStatement>
//                   | <drillthroughStatement>
//                   | <explainStatement>
//
// <selectStatement> ::= [WITH <formulaSpecification>]
//                         SELECT [<SelectQueryAxisClause>
//                                [, <SelectQueryAxisClause>...]]
//                         FROM [<cubeSpecification>]
//                         [WHERE <slicerSpecification>]
//                         [<cellProps>]
//
// <drillthroughStatment> ::=
//     DRILLTHROUGH
//     [ MAXROWS <count> ]
//     [ FIRSTROWSET <count> ]
//     <selectStatement>
//     [ RETURN <memberOrAttribute> [, <memberOrAttribute>...] ]
//
// <explainStatement> ::=
//     EXPLAIN PLAN FOR ( <selectStatement> | <drillthroughStatement> )
//
MdxStatement parseMdxStatement :
{
  MdxStatement mdxStatement = null;
}
(
    mdxStatement = parseSelectStatement
  	|
  	mdxStatement = parseDrillthroughStatement
    |
    mdxStatement = parseExplainStatement
)
  < EOF >
  {
    return mdxStatement;
  }
;


DrillthroughStatement parseDrillthroughStatement :
{
  SelectStatement selectStatement = null;
  List < ReturnItem > returnItems = null;
  Optional<Integer> maxRows = Optional.ofNullable(null);
  Optional<Integer> firstRowSet = Optional.ofNullable(null);
}
  < DRILLTHROUGH >
  (
    < MAXROWS > < UNSIGNED_INTEGER_LITERAL >
    {
        maxRows = Optional.of(Integer.valueOf(getToken(0).getImage()));
    }
  )?
  (
    < FIRSTROWSET > < UNSIGNED_INTEGER_LITERAL >
    {
        firstRowSet = Optional.of(Integer.valueOf(getToken(0).getImage()));
    }
  )?
  selectStatement = parseSelectStatement
  (
    < RETURN > returnItems = parseReturnItems
  )?
  {
    return new DrillthroughStatementR(maxRows, firstRowSet, selectStatement, returnItems);
  }
;

ExplainStatement parseExplainStatement :
{
  MdxStatement mdxStatement = null;
}
  < EXPLAIN > < PLAN> < FOR >
  (
    mdxStatement = parseSelectStatement
    |
    mdxStatement = parseDrillthroughStatement
  )
  {
    return new ExplainStatementR(mdxStatement);
  }
;


List < ReturnItem > parseReturnItems :
{
  List < ReturnItem > returnItems = new LinkedList<> ();
  ReturnItem item;
}
  item = parseReturnItem
  {
    returnItems.add(item);
  }
  (
    < COMMA > item = parseReturnItem
    {
      returnItems.add(item);
    }
  )*
  {
    return returnItems;
  }
;


ReturnItem parseReturnItem :
{
  CompoundId compoundId;
}
  compoundId = parseCompoundId
  {
    return new ReturnItemR(compoundId);
  }
;

//https://learn.microsoft.com/en-us/sql/mdx/mdx-data-definition-create-cell-calculation?view=sql-server-ver16

CreateCellCalculationBodyClause parseCreateCellCalculationBodyClause:
{
  CreateCellCalculationBodyClause createCellCalculationBC = null;
}
 <NOT><NOT><NOT><NOT><NOT><NOT><NOT>
  {
    return createCellCalculationBC;
  }
;

// https://learn.microsoft.com/en-us/analysis-services/multidimensional-models/mdx/mdx-building-measures?view=asallproducts-allversions
MeasureBodyClause parseMeasureBodyClause:
{
}
  <NOT><NOT><NOT><NOT><NOT><NOT><NOT>
  {
    return new MeasureBodyClauseR();
  }
;


// https://docs.oracle.com/cd/E57185_01/ESBTR/mdx_grammar_rules.html
SelectWithClause parseSelectWithClause :
{
  SelectWithClause selectWithClause = null;
}
  ( <CELL> <CALCULATION> selectWithClause = parseCreateCellCalculationBodyClause
  | ("CALCULATED")? < MEMBER > selectWithClause = parseCreateMemberBodyClause
  | < SET > selectWithClause = parseCreateSetBodyClause
  | <MEASURE> selectWithClause = parseMeasureBodyClause
  )
  {
    return selectWithClause;
  }
;

//https://learn.microsoft.com/en-us/sql/mdx/mdx-data-manipulation-select?view=sql-server-ver16
SelectStatement parseSelectStatement :
{
  List<SelectWithClause> selectWithClauses = new LinkedList<>();
  SelectQueryClause selectQueryClause = null;
  SelectSubcubeClause selectSubcubeClause = null;
  Optional<SelectSlicerAxisClause> selectSlicerAxisClause = Optional.empty();
  SelectCellPropertyListClause selectCellPropertyListClause = null;
  SelectWithClause selectWithClause = null;
}
  (
    < WITH >
      selectWithClause = parseSelectWithClause
    {
      selectWithClauses.add(selectWithClause);
    }
    (
       selectWithClause = parseSelectWithClause
      {
        selectWithClauses.add(selectWithClause);
      }
    )*

  )?
  < SELECT >
  (
    selectQueryClause = parseSelectQueryAsteriskClause
  |
    selectQueryClause = parseSelectQueryAxesClause
  | /* empty */
    {
      selectQueryClause = new SelectQueryEmptyClauseR();
    }
  )
  < FROM > selectSubcubeClause = parseSelectSubcubeClause
  (
    selectSlicerAxisClause = parseSelectSlicerAxisClause
  )?
  (
    selectCellPropertyListClause = parseSelectCellPropertyListClause
  )?
  {
    return new SelectStatementR(selectWithClauses, selectQueryClause, selectSubcubeClause, selectSlicerAxisClause, Optional.ofNullable(selectCellPropertyListClause));
  }
;


SelectSubcubeClause parseSelectSubcubeClause :
{
  SelectSubcubeClause selectSubcubeClause = null;
}
  (
    selectSubcubeClause = parseSelectSubcubeClauseName
  |
    selectSubcubeClause = parseSelectSubcubeClauseStatement
  )
  {
    return selectSubcubeClause;
  }
;


SelectSubcubeClauseName parseSelectSubcubeClauseName :
{
  NameObjectIdentifier nameObjectIdentifier;
}
  nameObjectIdentifier = parseNameObjectIdentifier
  {
    return new SelectSubcubeClauseNameR(nameObjectIdentifier);
  }
;


SelectSubcubeClauseStatement parseSelectSubcubeClauseStatement :
{
  SelectQueryClause selectQueryClause = null;
  SelectSubcubeClause selectSubcubeClause = null;
  Optional<SelectSlicerAxisClause> selectSlicerAxisClause = Optional.empty();
}
  (
    < LPAREN > < SELECT >
    (
      selectQueryClause = parseSelectQueryAsteriskClause
    |
      selectQueryClause = parseSelectQueryAxesClause
    | {
          selectQueryClause = new SelectQueryEmptyClauseR();
       }
    )?
    < FROM > selectSubcubeClause = parseSelectSubcubeClause
    (
      selectSlicerAxisClause = parseSelectSlicerAxisClause
    )?
    < RPAREN >
  )
  {
    return new SelectSubcubeClauseStatementR(selectQueryClause, selectSubcubeClause, selectSlicerAxisClause);
  }
;


SelectQueryAsteriskClause parseSelectQueryAsteriskClause :
  < ASTERISK >
  {
    return new SelectQueryAsteriskClauseR();
  }
;


SelectQueryAxesClause parseSelectQueryAxesClause :
{
  List < SelectQueryAxisClause > selectQueryAxisClauses = new LinkedList<>();
  SelectQueryAxisClause selectQueryAxisClause;
}
  selectQueryAxisClause = parseSelectQueryAxisClause
  {
    selectQueryAxisClauses.add(selectQueryAxisClause);
  }
  (
    < COMMA > selectQueryAxisClause = parseSelectQueryAxisClause
    {
      selectQueryAxisClauses.add(selectQueryAxisClause);
    }
  )*
  {
    return new SelectQueryAxesClauseR(selectQueryAxisClauses);
  }
;


Optional<SelectSlicerAxisClause> parseSelectSlicerAxisClause :
{
  Expression expression = null;
}
  < WHERE > expression = parseExpression
  {
    if(expression==null)
    {
      return Optional.empty();
    }
    return Optional.of(new SelectSlicerAxisClauseR(expression));
  }
;


SelectCellPropertyListClause parseSelectCellPropertyListClause :
{
  List < String > cellProperties = new LinkedList<>();
  String property=null;
  boolean cell=false;
}
  (< CELL >
     {
      cell=true;
     }
  )?
   < PROPERTIES > <ID>
    {
      cellProperties.add(getToken(0).getImage());
    }
  (
    < COMMA > <ID>
    {
      cellProperties.add(getToken(0).getImage());
    }
  )*
  {
    return new SelectCellPropertyListClauseR(cellProperties,cell);
  }
;

// https://learn.microsoft.com/en-us/sql/mdx/mdx-data-definition-create-member?view=sql-server-ver16
CreateMemberBodyClause parseCreateMemberBodyClause :
{
 CompoundId compoundId = null;
 Expression expression = null;
 List<MemberPropertyDefinition> memberPropertyDefinitions = new LinkedList<>();
 MemberPropertyDefinition memberPropertyDefinition = null;
}
//  <CURRENTCUBE>
//  |
  compoundId = parseCompoundId < AS > expression = parseExpression

  (
    < COMMA > memberPropertyDefinition = parseMemberPropertyDefinition
    {
      memberPropertyDefinitions.add(memberPropertyDefinition);
    }
  )*

  {
    return new CreateMemberBodyClauseR(compoundId,expression,memberPropertyDefinitions);
  }
;


MemberPropertyDefinition parseMemberPropertyDefinition :
{
  ObjectIdentifier objectIdentifier;
  Expression expression;
}
  objectIdentifier = parseIdentifier < EQ > expression = parseExpression
  {
    return new MemberPropertyDefinitionR(objectIdentifier,expression);
  }
;


FormulaExpression parseFormulaExpression :
  parseIdentifier < EQ > parseIdentifier
  {
    return new FormulaExpressionR();
  }
;


Expression parseExpression :
{
  Expression expression;
  ObjectIdentifier objectIdentifier;
}
  expression = parseUnaliasedExpression
  (
    < AS > objectIdentifier = parseIdentifier
    {
      CompoundId compundId = new CompoundIdR(List.of(objectIdentifier));
      expression = new CallExpressionR("AS", CallExpression.Type.TERM_INFIX, List.of(
      expression, compundId
      )
      );
    }
  )*
  {
    return expression;
  }
;


Expression parseExpressionOrEmpty :
{
  Expression expression;
}
  expression = parseExpression
  {
    return expression;
  }
| /* empty */
  {
    return new CallExpressionR("", CallExpression.Type.EMPTY, List.of()
    );
  }
;


// Comma-separated list of expressions, some of which may be empty. Used
// for functions.
List < Expression > expOrEmptyList :
{
  Expression expression;
  List < Expression > list = new LinkedList<>();
}
  expression = parseExpressionOrEmpty
  {
    list.add(expression);
  }
  (
    < COMMA >
    expression = parseExpressionOrEmpty
    {
      list.add(expression);
    }
  )*
  {
    return list;
  }
;


// List of expressions, none of which may be empty.
List < Expression > expList :
{
  Expression expression;
  List < Expression > list = new LinkedList<>();
}
  expression = parseExpression
  {
    list.add(expression);
  }
  (
    < COMMA >
    expression = parseExpression
    {
      list.add(expression);
    }
  )*
  {
    return list;
  }
;


Expression parseExpressionEof :
{
  Expression expression;
}
  expression = parseExpression < EOF >
  {
    return expression;
  }
;


ObjectIdentifier parseIdentifier :
{
  ObjectIdentifier objectIdentifier;
}
  (
    objectIdentifier = parseNameObjectIdentifier
  |
    objectIdentifier = parseKeyIdentifier
  )
  {
    return objectIdentifier;
  }
;


NameObjectIdentifier parseNameObjectIdentifier :
{
  String id;
}
  id = parseKeyword
  {
    // Keywords that are  not Reserved could be used
    return new NameObjectIdentifierR(id, ObjectIdentifier.Quoting.UNQUOTED);
  }
| < ID >
  {
    return new NameObjectIdentifierR(getToken(0).getImage(), ObjectIdentifier.Quoting.UNQUOTED);
  }
| < ATSIGN > < ID >
  {
    return new NameObjectIdentifierR("@" + getToken(0).getImage(), ObjectIdentifier.Quoting.UNQUOTED);
  }
| < QUOTED_ID >
  {
    return new NameObjectIdentifierR(
    MdxParserUtil.stripQuotes(getToken(0).getImage(), "[", "]", "]]"),
    ObjectIdentifier.Quoting.QUOTED);
  }
;


// for example '&foo&[1]&bar' in '[x].&foo&[1]&bar.[y]'
KeyObjectIdentifier parseKeyIdentifier :
{
  List < NameObjectIdentifier > list = new ArrayList <> ();
  NameObjectIdentifier key;
}
  (
    key = parseAmpId
    {
      list.add(key);
    }
  )+
  {
    return new KeyObjectIdentifierR(list);
  }
;


NameObjectIdentifier parseAmpId :
  < AMP_QUOTED_ID >
  {
    return new NameObjectIdentifierR(
    MdxParserUtil.stripQuotes(getToken(0).getImage(), "&[", "]", "]]"),
    ObjectIdentifier.Quoting.QUOTED);
  }
|
  < AMP_UNQUOTED_ID >
  {
    return new NameObjectIdentifierR(
    getToken(0).getImage().substring(1),
    ObjectIdentifier.Quoting.UNQUOTED);
  }
;


// a keyword that is not a RESERVED_WORD could be used as identifier
String parseKeyword :
  (
    < DIMENSION >
  | < PROPERTIES >
  )
  {
    return getToken(0).getImage();
  }
;


CompoundId parseCompoundId :
{
  CompoundId compoundId;
  List < ObjectIdentifier > list = new ArrayList <> ();
  ObjectIdentifier s;
}
  s = parseIdentifier
  {
    list.add(s);
  }
  (
    SCAN < DOT > =>
    < DOT > s = parseIdentifier
    {
      list.add(s);
    }
  )*
  {
    return new CompoundIdR(list);
  }
;


// ----------------------------------------------------------------------------
// Expressions
Expression parseUnaliasedExpression :
{
  Expression x;
  Expression y;
}
  x = parseTerm5
  (
    < OR > y = parseTerm5
    {
      x = new CallExpressionR("OR", CallExpression.Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  | < XOR > y = parseTerm5
    {
      x = new CallExpressionR("XOR", CallExpression.Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  |
    // range 'm1 : m2' yields set of members
    < COLON > y = parseTerm5
    {
      x = new CallExpressionR(":", CallExpression.Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  )*
  {
    return x;
  }
;


Expression parseTerm5 :
{
  Expression x;
  Expression y;
}
  x = parseTerm4
  (
    < AND > y = parseTerm4
    {
      x = new CallExpressionR("AND", CallExpression.Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  )*
  {
    return x;
  }
;


Expression parseTerm4 :
{
  Expression x;
}
  x = parseTerm3
  {
    return x;
  }
| < NOT > x = parseTerm4
  {
    return new CallExpressionR("NOT", CallExpression.Type.TERM_PREFIX, List.of(
    x
    )
    );
  }
;


Expression parseTerm3 :
{
  Expression x;
  Expression y;
  Token op;
}
  x = parseTerm2
  (
    // e.g. "1 < 5"
    (
      < EQ >
      {
        op = getToken(0);
      }
    | < NE >
      {
        op = getToken(0);
      }
    | < LT >
      {
        op = getToken(0);
      }
    | < GT >
      {
        op = getToken(0);
      }
    | < LE >
      {
        op = getToken(0);
      }
    | < GE >
      {
        op = getToken(0);
      }
    )
    y = parseTerm2
    {
      x = new CallExpressionR(op.getImage(), CallExpression.Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  |
    // We expect a shift-reduce conflict here, because NULL is a literal and
    // so is a valid argument to the IS operator. We want to shift.
    SCAN 2 =>
    < IS > < NULL >
    {
      x = new CallExpressionR("IS NULL", CallExpression.Type.TERM_POSTFIX, List.of(
      x
      )
      );
    }
  |
    // e.g. "x IS y"; but "x IS NULL" is handled elsewhere
    SCAN 2 =>
    < IS > y = parseTerm2
    {
      x = new CallExpressionR("IS", CallExpression.Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  | < IS > < EMPTY >
    {
      x = new CallExpressionR(
      "IS EMPTY", CallExpression.Type.TERM_POSTFIX, List.of(x));
    }
  | < MATCHES > y = parseTerm2
    {
      x = new CallExpressionR("MATCHES", CallExpression.Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  | SCAN 2 =>
    < NOT > < MATCHES > y = parseTerm2
    {
      x = new CallExpressionR(
      "NOT", CallExpression.Type.TERM_PREFIX, List.of(
      new CallExpressionR(
      "MATCHES", CallExpression.Type.TERM_INFIX, List.of(
      x, y
      )
      )
      )
      );
    }
  | < IN > y = parseTerm2
    {
      x = new CallExpressionR("IN", CallExpression.Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  | < NOT > < IN > y = parseTerm2
    {
      x = new CallExpressionR(
      "NOT", CallExpression.Type.TERM_PREFIX, List.of(
      new CallExpressionR(
      "IN", CallExpression.Type.TERM_INFIX, List.of(
      x, y
      )
      )
      )
      );
    }
  )*
  {
    return x;
  }
;


Expression parseTerm2 :
{
  Expression x;
  Expression y;
}
  x = parseTerm
  (
    < PLUS > y = parseTerm
    {
      x = new CallExpressionR("+", CallExpression.Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  | < MINUS > y = parseTerm
    {
      x = new CallExpressionR("-", CallExpression.Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  | < CONCAT > y = parseTerm
    {
      x = new CallExpressionR("||", CallExpression.Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  )*
  {
    return x;
  }
;


Expression parseTerm :
{
  Expression x;
  Expression y;
}
  x = parseFactor
  (
    < ASTERISK > y = parseFactor
    {
      x = new CallExpressionR("*", CallExpression.Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  | < SOLIDUS > y = parseFactor
    {
      x = new CallExpressionR("/", CallExpression.Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  )*
  {
    return x;
  }
;


Expression parseFactor :
{
  Expression p;
}
  p = parsePrimary
  {
    return p;
  }
| < PLUS > p = parsePrimary
  {
    return p;
  }
| < MINUS > p = parsePrimary
  {
    return new CallExpressionR("-", CallExpression.Type.TERM_PREFIX, List.of(
    p
    )
    );
  }
| < EXISTING > p = parsePrimary
  {
    return new CallExpressionR("Existing", CallExpression.Type.TERM_PREFIX, List.of(
    p
    )
    );
  }
;


Expression parsePrimary :
{
  Expression expression;
}
  expression = parseAtom
  (
    < DOT > expression = objectIdentifierOrFuncall(expression)
  )*
  {
    return expression;
  }
;


Expression objectIdentifierOrFuncall(Expression left) :
{
  ObjectIdentifier objectIdentifier;
  List < Expression > argList = null;
}
  objectIdentifier = parseIdentifier
  (
    < LPAREN >
    (
      argList = expOrEmptyList
    )
    < RPAREN >
  )?
  {
    return MdxParserUtil.createCall(left, objectIdentifier, argList);
  }
;


NumericLiteral parseNumericLiteral :
  < DECIMAL_NUMERIC_LITERAL >
  {
    return new NumericLiteralR(new BigDecimal(getToken(0).getImage()));
  }
| < UNSIGNED_INTEGER_LITERAL >
  {
    return new NumericLiteralR(new BigDecimal(getToken(0).getImage()));
  }
| < APPROX_NUMERIC_LITERAL >
  {
    return new NumericLiteralR(new BigDecimal(getToken(0).getImage()));
  }
;


Expression parseAtom :
{
  Expression expression;
  NameObjectIdentifier nameObjectIdentifier;
  List < Expression > expressions;
}
  < SINGLE_QUOTED_STRING >
  {
    return new StringLiteralR(MdxParserUtil.stripQuotes(getToken(0).getImage(), "'", "'", "''"));
  }
| < DOUBLE_QUOTED_STRING >
  {
    return new StringLiteralR(MdxParserUtil.stripQuotes(getToken(0).getImage(), '"' + "", '"' + "", '"' + "" + '"'));
  }
| expression = parseNumericLiteral
  {
    return expression;
  }
| < NULL >
  {
    return NullLiteralR.SINGLETON;
  }
| < CAST > < LPAREN > expression = parseUnaliasedExpression
  < AS > nameObjectIdentifier = parseNameObjectIdentifier < RPAREN >
  {
    return new CallExpressionR(
    "CAST", CallExpression.Type.CAST, List.of(
    expression,
    new SymbolLiteralR(nameObjectIdentifier.name())
    )
    );
  }
| < LPAREN > expressions = expList < RPAREN >
  {
    // Whereas ([Sales],[Time]) and () are tuples, ([Sales]) and (5)
    // are just expressions.
    return new CallExpressionR(
    "()", CallExpression.Type.PARENTHESES, expressions);
  }
|
  // set built from sets/tuples
  < LBRACE >
  (
    SCAN < RBRACE > =>
    {
      expressions = Collections.emptyList();
    }
  |
    expressions = expList
  )
  < RBRACE >
  {
    return new CallExpressionR(
    "{}", CallExpression.Type.BRACES, expressions);
  }
| expression = parseCaseExpression
  {
    return expression;
  }
|
  // Function call "foo(a, b)" or "whiz!bang!foo(a, b)".
  // Properties "x.PROP" and methods "exp.meth(a)" are in primary().
  nameObjectIdentifier = parseNameObjectIdentifier
  (
    < BANG > nameObjectIdentifier = parseNameObjectIdentifier
    {
    // We support the syntax for qualifying function names with package
    // names separated by bang ('!'), e.g. 'whiz!bang!foo(a, b)'
    // but currently we ignore the qualifiers. The previous example is
    // equivalent to 'foo(a, b)'.
    }
  )*
  (
    < LPAREN >
    (
      SCAN < RPAREN > =>
      {
        expressions = Collections.emptyList();
      }
    |
      expressions = expOrEmptyList
    )
    < RPAREN >
  |
    /* empty */{
      expressions = null;
    }
  )
  {
    return MdxParserUtil.createCall(null, nameObjectIdentifier, expressions);
  }
;


Expression parseCaseExpression :
{
  Expression expression, expression2;
  List < Expression > expressions = new ArrayList <> ();
  boolean match = false;
}
  < CASE >
  (
    expression = parseExpression
    {
      match = true;
      expressions.add(expression);
    }
  )?
  (
    < WHEN > expression = parseExpression < THEN > expression2 = parseExpression
    {
      expressions.add(expression);
      expressions.add(expression2);
    }
  )*
  (
    < ELSE > expression = parseExpression
    {
      expressions.add(expression);
    }
  )?
  < END >
  {
    if (match)
    {
      return new CallExpressionR(
      "_CaseMatch", CallExpression.Type.TERM_CASE, expressions);
    }
    else
    {
      return new CallExpressionR(
      "_CaseTest", CallExpression.Type.TERM_CASE, expressions);
    }
  }
;



CreateSetBodyClause parseCreateSetBodyClause :
{
 CompoundId compoundId = null;
 Expression expression = null;
 //List<MemberPropertyDefinition> memberPropertyDefinitions = new LinkedList<>();
 //MemberPropertyDefinition memberPropertyDefinition = null;
}

  compoundId = parseCompoundId < AS > expression = parseExpression
  {
    return new CreateSetBodyClauseR(compoundId,expression);
  }
;


SelectDimensionPropertyListClause parseSelectDimensionPropertyListClause :
  (< DIMENSION >)?
  {
    List < CompoundId > cellProperties = new LinkedList<> ();
  }
  < PROPERTIES >
  {
    cellProperties.add(parseCompoundId());
  }
  (
    < COMMA >
    {
          cellProperties.add(parseCompoundId());
    }
  )*
  {
    return new SelectDimensionPropertyListClauseR(cellProperties);
  }
;


RefreshStatement parseRefreshStatement :
{
  NameObjectIdentifier cubeName;
}
  < REFRESH > < CUBE >  cubeName = parseNameObjectIdentifier
{
    return new RefreshStatementR(cubeName);
}
;

UpdateStatement parseUpdateStatement :
{
  NameObjectIdentifier cubeName;
  List<UpdateClause> list = new ArrayList<UpdateClause>();
  UpdateClause uc;
}
  < UPDATE > < CUBE >  cubeName = parseNameObjectIdentifier
  <SET>
      uc = updateClause() {
          list.add(uc);
      }
      (
          <COMMA>
          uc = updateClause() {
              list.add(uc);
          }
      )*
{
    return new UpdateStatementR(cubeName, list);
}
;

UpdateClause updateClause :
{
    Expression t = null;
    Expression v = null;
    Expression w = null;
    Allocation a = Allocation.NO_ALLOCATION;
}

  t = parseAtom < EQ > v = parseExpression
  (
          <USE_EQUAL_ALLOCATION>
          { a = Allocation.USE_EQUAL_ALLOCATION; }
          |
          <USE_EQUAL_INCREMENT>
          { a = Allocation.USE_EQUAL_INCREMENT; }
          |
          <USE_WEIGHTED_ALLOCATION>
          { a = Allocation.USE_WEIGHTED_ALLOCATION; }
          (<BY> w = parseExpression)?
          |
          <USE_WEIGHTED_INCREMENT>
          { a = Allocation.USE_WEIGHTED_INCREMENT; }
          (<BY> w = parseExpression)?
  )?

  {
    return new UpdateClauseR(t, v, a, w);
  }
;

DMVStatement parseDMVStatement :
{
  CompoundId c;
  List<CompoundId> columns = new ArrayList<>();
  NameObjectIdentifier tableId = null;
  Expression expression = null;
}
  < SELECT >
(
    c = parseCompoundId()
    { columns.add(c); }
    (
        < COMMA >
    { columns.add(parseCompoundId()); }
    )*

)?
< FROM > < SYSTEM_CUBE >< DOT > tableId = parseNameObjectIdentifier()
(
          < WHERE > expression = parseExpression()
)?
{
    return new DMVStatementR(columns, tableId, expression);
}
;

// <SelectQueryAxisClause> ::= [NON EMPTY] <set> [<dimProps>] ON <axis_name>
SelectQueryAxisClause parseSelectQueryAxisClause :
{
  boolean nonEmpty = false;
  SelectDimensionPropertyListClause selectDimensionPropertyListClause = null;
  Expression expression;
  int n;
  Axis axis;
}
  (< NON > < EMPTY >
  {
    nonEmpty = true;
  }
  )?
  expression = parseExpression
  (
    selectDimensionPropertyListClause = parseSelectDimensionPropertyListClause
  )?
  < ON >
  (
    (
      < UNSIGNED_INTEGER_LITERAL >
      {
        n = Integer.valueOf(getToken(0).getImage()).intValue();
      }
    | < AXIS > < LPAREN > < UNSIGNED_INTEGER_LITERAL >
      {
        n = Integer.valueOf(getToken(0).getImage()).intValue();
      }
      < RPAREN >
    )
    {
      if (n < 0)
      {
        throw new IllegalArgumentException("Only axis numbers >= 0 allowed.");
      }
      else
      {
        axis = AxisR.createUnnamed(n);
      }
    }
  |
    (
      < COLUMNS >
      {
        axis = AxisR.COLUMNS_NAMED;
      }
    | < ROWS >
      {
        axis = AxisR.ROWS_NAMED;
      }
    | < PAGES >
      {
        axis = AxisR.PAGES_NAMED;
      }
    | < SECTIONS >
      {
        axis = AxisR.SECTIONS_NAMED;
      }
    | < CHAPTERS >
      {
        axis = AxisR.CHAPTERS_NAMED;
      }
    )
  )
  {
    return new SelectQueryAxisClauseR(nonEmpty, expression, axis, selectDimensionPropertyListClause);
  }
;

